{"ast":null,"code":"// Components\nimport { VFadeTransition } from '../transitions';\nimport VIcon from '../VIcon'; // Mixins\n\nimport Colorable from '../../mixins/colorable';\nimport { inject as RegistrableInject } from '../../mixins/registrable'; // Directives\n\nimport ripple from '../../directives/ripple'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nconst baseMixins = mixins(Colorable, RegistrableInject('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel'));\nexport default baseMixins.extend().extend({\n  name: 'v-expansion-panel-header',\n  directives: {\n    ripple\n  },\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand'\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false\n    }\n  },\n  data: () => ({\n    hasMousedown: false\n  }),\n  computed: {\n    classes() {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown\n      };\n    },\n    isActive() {\n      return this.expansionPanel.isActive;\n    },\n    isDisabled() {\n      return this.expansionPanel.isDisabled;\n    },\n    isReadonly() {\n      return this.expansionPanel.isReadonly;\n    }\n  },\n  created() {\n    this.expansionPanel.registerHeader(this);\n  },\n  beforeDestroy() {\n    this.expansionPanel.unregisterHeader();\n  },\n  methods: {\n    onClick(e) {\n      this.$emit('click', e);\n    },\n    genIcon() {\n      const icon = getSlot(this, 'actions') || [this.$createElement(VIcon, this.expandIcon)];\n      return this.$createElement(VFadeTransition, [this.$createElement('div', {\n        staticClass: 'v-expansion-panel-header__icon',\n        class: {\n          'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate\n        },\n        directives: [{\n          name: 'show',\n          value: !this.isDisabled\n        }]\n      }, icon)]);\n    }\n  },\n  render(h) {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.isActive\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => this.hasMousedown = true,\n        mouseup: () => this.hasMousedown = false\n      }\n    }), [getSlot(this, 'default', {\n      open: this.isActive\n    }, true), this.hideActions || this.genIcon()]);\n  }\n});","map":{"version":3,"mappings":"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","names":["VFadeTransition","VIcon","Colorable","inject","RegistrableInject","ripple","getSlot","mixins","baseMixins","extend","name","directives","props","disableIconRotate","Boolean","expandIcon","type","String","default","hideActions","Object","data","hasMousedown","computed","classes","isActive","expansionPanel","isDisabled","isReadonly","created","registerHeader","beforeDestroy","unregisterHeader","methods","onClick","e","$emit","genIcon","icon","$createElement","staticClass","class","value","render","h","setBackgroundColor","color","attrs","tabindex","on","$listeners","click","mousedown","mouseup","open"],"sourceRoot":"","sources":["../../../src/components/VExpansionPanel/VExpansionPanelHeader.ts"],"sourcesContent":["// Components\nimport { VFadeTransition } from '../transitions'\nimport VExpansionPanel from './VExpansionPanel'\nimport VIcon from '../VIcon'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\nimport { inject as RegistrableInject } from '../../mixins/registrable'\n\n// Directives\nimport ripple from '../../directives/ripple'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\n// Types\nimport Vue, { VNode, VueConstructor } from 'vue'\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject<'expansionPanel', VueConstructor<Vue>>('expansionPanel', 'v-expansion-panel-header', 'v-expansion-panel')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  $el: HTMLElement\n  expansionPanel: InstanceType<typeof VExpansionPanel>\n}\n\nexport default baseMixins.extend<options>().extend({\n  name: 'v-expansion-panel-header',\n\n  directives: { ripple },\n\n  props: {\n    disableIconRotate: Boolean,\n    expandIcon: {\n      type: String,\n      default: '$expand',\n    },\n    hideActions: Boolean,\n    ripple: {\n      type: [Boolean, Object],\n      default: false,\n    },\n  },\n\n  data: () => ({\n    hasMousedown: false,\n  }),\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel-header--active': this.isActive,\n        'v-expansion-panel-header--mousedown': this.hasMousedown,\n      }\n    },\n    isActive (): boolean {\n      return this.expansionPanel.isActive\n    },\n    isDisabled (): boolean {\n      return this.expansionPanel.isDisabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanel.isReadonly\n    },\n  },\n\n  created () {\n    this.expansionPanel.registerHeader(this)\n  },\n\n  beforeDestroy () {\n    this.expansionPanel.unregisterHeader()\n  },\n\n  methods: {\n    onClick (e: MouseEvent) {\n      this.$emit('click', e)\n    },\n    genIcon () {\n      const icon = getSlot(this, 'actions') ||\n        [this.$createElement(VIcon, this.expandIcon)]\n\n      return this.$createElement(VFadeTransition, [\n        this.$createElement('div', {\n          staticClass: 'v-expansion-panel-header__icon',\n          class: {\n            'v-expansion-panel-header__icon--disable-rotate': this.disableIconRotate,\n          },\n          directives: [{\n            name: 'show',\n            value: !this.isDisabled,\n          }],\n        }, icon),\n      ])\n    },\n  },\n\n  render (h): VNode {\n    return h('button', this.setBackgroundColor(this.color, {\n      staticClass: 'v-expansion-panel-header',\n      class: this.classes,\n      attrs: {\n        tabindex: this.isDisabled ? -1 : null,\n        type: 'button',\n        'aria-expanded': this.isActive,\n      },\n      directives: [{\n        name: 'ripple',\n        value: this.ripple,\n      }],\n      on: {\n        ...this.$listeners,\n        click: this.onClick,\n        mousedown: () => (this.hasMousedown = true),\n        mouseup: () => (this.hasMousedown = false),\n      },\n    }), [\n      getSlot(this, 'default', { open: this.isActive }, true),\n      this.hideActions || this.genIcon(),\n    ])\n  },\n})\n"]},"metadata":{},"sourceType":"module"}