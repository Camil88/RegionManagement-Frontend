{"ast":null,"code":"import { mapActions, mapState, mapGetters } from 'vuex';\nimport TableRevGP from '@/components/Tables/TableRevGP.vue';\nimport BarChart from '@/components/Charts/BarChart.vue';\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  components: {\n    TableRevGP,\n    Bar,\n    BarChart\n  },\n  data() {\n    return {\n      chartData: this.allSalesPerformance,\n      chartData: {\n        labels: ['January', 'February', 'March'],\n        datasets: [{\n          data: [40, 20, 12]\n        }]\n      },\n      chartOptions: {\n        responsive: true\n      },\n      loaded: false\n    };\n  },\n  computed: {\n    ...mapState('custom', ['allSalesPerformance']),\n    ...mapGetters('custom', ['getAllSales'])\n  },\n  methods: {\n    ...mapActions('custom', ['getAllSalesPerformanceAction'])\n  },\n  mounted() {\n    this.loaded = false;\n    try {\n      this.getAllSalesPerformanceAction('SFR');\n      this.loaded = true;\n    } catch (e) {\n      console.error(e);\n    }\n    // this.renderChart(\n    //   {\n    //   labels: ['Division', 'Revenue'],\n    //   datasets: [\n    //     {\n    //       data: [\n    //       this.allSalesPerformance.division,\n    //       this.allSalesPerformance.revenue,\n    //       ]\n    //     }\n    //   ]\n    // }\n    // )\n  }\n};","map":{"version":3,"mappings":"AA4BA;AACA;AACA;AACA;AACA;AAEAA;AAEA;EAEAC;IACAC;IACAC;IACAC;EACA;EAEAC;IACA;MACAC;MACAA;QACAC;QACAC;UAAAH;QAAA;MACA;MACAI;QACAC;MACA;MACAC;IACA;EACA;EAEAC;IACA;IACA;EACA;EAEAC;IACA;EACA;EAEAC;IAEA;IACA;MACA;MACA;IACA;MACAC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA;AAEA","names":["ChartJS","components","TableRevGP","Bar","BarChart","data","chartData","labels","datasets","chartOptions","responsive","loaded","computed","methods","mounted","console"],"sourceRoot":"src/views","sources":["RevGP.vue"],"sourcesContent":["<template>\n  <v-container class=\"mainWidth\">\n    <v-row>\n      <v-col cols=\"6\">\n        <Bar v-if=\"loaded\"\n          id=\"my-chart-id\"\n          :options=\"chartOptions\"\n          :data=\"chartData\"\n        />\n        <!-- :data=\"getAllSales\" -->\n      </v-col>\n      <v-col cols=\"6\">\n        <Bar\n          id=\"my-chart-id\"\n          :options=\"chartOptions\"\n          :data=\"getAllSales\"\n        />\n      </v-col>\n    </v-row>\n    <v-row>\n      <v-col cols=\"12\">\n      <TableRevGP />\n    </v-col>\n    </v-row>\n  </v-container>\n</template>\n\n<script>\nimport { mapActions, mapState, mapGetters } from 'vuex';\nimport TableRevGP from '@/components/Tables/TableRevGP.vue';\nimport BarChart from '@/components/Charts/BarChart.vue';\nimport { Bar } from 'vue-chartjs'\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js'\n\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale)\n\n  export default {\n\n    components: {\n      TableRevGP,\n      Bar,\n      BarChart\n    },\n\n    data() {\n      return {\n      chartData: this.allSalesPerformance,\n        chartData: {\n        labels: [ 'January', 'February', 'March' ],\n        datasets: [ { data: [40, 20, 12] } ]\n      },\n      chartOptions: {\n        responsive: true\n      },\n      loaded: false\n      }\n    },\n\n    computed: {\n      ...mapState('custom', ['allSalesPerformance']),\n      ...mapGetters('custom', ['getAllSales']),\n    },\n\n    methods: {\n      ...mapActions('custom', ['getAllSalesPerformanceAction']),\n    },\n\n    mounted() {   \n      \n      this.loaded = false\n      try {\n        this.getAllSalesPerformanceAction('SFR')\n        this.loaded = true\n      } catch (e) {\n        console.error(e)\n      }\n      // this.renderChart(\n      //   {\n      //   labels: ['Division', 'Revenue'],\n      //   datasets: [\n      //     {\n      //       data: [\n      //       this.allSalesPerformance.division,\n      //       this.allSalesPerformance.revenue,\n      //       ]\n      //     }\n      //   ]\n      // }\n      // )\n    },\n\n  }\n</script>\n\n<style scoped>\n  .mainWidth {\n    max-width: calc(100vw * 0.9);\n  }\n</style>\n"]},"metadata":{},"sourceType":"module"}