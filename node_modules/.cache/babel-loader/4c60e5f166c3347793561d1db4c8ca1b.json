{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nexport default Vue.extend({\n  name: 'mouse',\n  methods: {\n    getDefaultMouseEventHandlers(suffix, getEvent) {\n      const listeners = Object.keys(this.$listeners).filter(key => key.endsWith(suffix)).reduce((acc, key) => {\n        acc[key] = {\n          event: key.slice(0, -suffix.length)\n        };\n        return acc;\n      }, {});\n      return this.getMouseEventHandlers({\n        ...listeners,\n        ['contextmenu' + suffix]: {\n          event: 'contextmenu',\n          prevent: true,\n          result: false\n        }\n      }, getEvent);\n    },\n    getMouseEventHandlers(events, getEvent) {\n      const on = {};\n      for (const event in events) {\n        const eventOptions = events[event];\n        if (!this.$listeners[event]) continue; // TODO somehow pull in modifiers\n\n        const prefix = eventOptions.passive ? '&' : (eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : '');\n        const key = prefix + eventOptions.event;\n        const handler = e => {\n          var _a, _b;\n          const mouseEvent = e;\n          if (eventOptions.button === undefined || mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button) {\n            if (eventOptions.prevent) {\n              e.preventDefault();\n            }\n            if (eventOptions.stop) {\n              e.stopPropagation();\n            } // Due to TouchEvent target always returns the element that is first placed\n            // Even if touch point has since moved outside the interactive area of that element\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target\n            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at\n\n            if (e && 'touches' in e) {\n              const classSeparator = ' ';\n              const eventTargetClasses = (_a = e.currentTarget) === null || _a === void 0 ? void 0 : _a.className.split(classSeparator);\n              const currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY); // Get \"the same kind\" current hovering target by checking\n              // If element has the same class of initial touch start element (which has touch event listener registered)\n\n              const currentTarget = currentTargets.find(t => t.className.split(classSeparator).some(c => eventTargetClasses.includes(c)));\n              if (currentTarget && !((_b = e.target) === null || _b === void 0 ? void 0 : _b.isSameNode(currentTarget))) {\n                currentTarget.dispatchEvent(new TouchEvent(e.type, {\n                  changedTouches: e.changedTouches,\n                  targetTouches: e.targetTouches,\n                  touches: e.touches\n                }));\n                return;\n              }\n            }\n            this.$emit(event, getEvent(e), e);\n          }\n          return eventOptions.result;\n        };\n        if (key in on) {\n          /* istanbul ignore next */\n          if (Array.isArray(on[key])) {\n            on[key].push(handler);\n          } else {\n            on[key] = [on[key], handler];\n          }\n        } else {\n          on[key] = handler;\n        }\n      }\n      return on;\n    }\n  }\n});","map":{"version":3,"mappings":"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","names":["Vue","extend","name","methods","getDefaultMouseEventHandlers","suffix","getEvent","listeners","Object","keys","$listeners","filter","key","endsWith","reduce","acc","event","slice","length","getMouseEventHandlers","prevent","result","events","on","eventOptions","prefix","passive","once","capture","handler","e","mouseEvent","button","undefined","buttons","preventDefault","stop","stopPropagation","classSeparator","eventTargetClasses","currentTarget","_a","className","split","currentTargets","document","elementsFromPoint","changedTouches","clientX","clientY","find","t","some","c","includes","target","_b","isSameNode","dispatchEvent","TouchEvent","type","targetTouches","touches","$emit","Array","isArray","push"],"sourceRoot":"","sources":["../../../../src/components/VCalendar/mixins/mouse.ts"],"sourcesContent":["import Vue from 'vue'\n\nexport type MouseHandler = (e: MouseEvent | TouchEvent) => any\n\nexport type MouseEvents = {\n  [event: string]: {\n    event: string\n    passive?: boolean\n    capture?: boolean\n    once?: boolean\n    stop?: boolean\n    prevent?: boolean\n    button?: number\n    result?: any\n  }\n}\n\nexport type MouseEventsMap = {\n  [event: string]: MouseHandler | MouseHandler[]\n}\n\nexport default Vue.extend({\n  name: 'mouse',\n\n  methods: {\n    getDefaultMouseEventHandlers (suffix: string, getEvent: MouseHandler): MouseEventsMap {\n      const listeners = Object.keys(this.$listeners)\n        .filter(key => key.endsWith(suffix))\n        .reduce((acc, key) => {\n          acc[key] = { event: key.slice(0, -suffix.length) }\n          return acc\n        }, {} as MouseEvents)\n\n      return this.getMouseEventHandlers({\n        ...listeners,\n        ['contextmenu' + suffix]: { event: 'contextmenu', prevent: true, result: false },\n      }, getEvent)\n    },\n    getMouseEventHandlers (events: MouseEvents, getEvent: MouseHandler): MouseEventsMap {\n      const on: MouseEventsMap = {}\n\n      for (const event in events) {\n        const eventOptions = events[event]\n\n        if (!this.$listeners[event]) continue\n\n        // TODO somehow pull in modifiers\n\n        const prefix = eventOptions.passive ? '&' : ((eventOptions.once ? '~' : '') + (eventOptions.capture ? '!' : ''))\n        const key = prefix + eventOptions.event\n\n        const handler: MouseHandler = e => {\n          const mouseEvent: MouseEvent = e as MouseEvent\n          if (eventOptions.button === undefined || (mouseEvent.buttons > 0 && mouseEvent.button === eventOptions.button)) {\n            if (eventOptions.prevent) {\n              e.preventDefault()\n            }\n            if (eventOptions.stop) {\n              e.stopPropagation()\n            }\n\n            // Due to TouchEvent target always returns the element that is first placed\n            // Even if touch point has since moved outside the interactive area of that element\n            // Ref: https://developer.mozilla.org/en-US/docs/Web/API/Touch/target\n            // This block of code aims to make sure touchEvent is always dispatched from the element that is being pointed at\n            if (e && 'touches' in e) {\n              const classSeparator = ' '\n\n              const eventTargetClasses = (e.currentTarget as HTMLElement)?.className.split(classSeparator)\n              const currentTargets = document.elementsFromPoint(e.changedTouches[0].clientX, e.changedTouches[0].clientY)\n\n              // Get \"the same kind\" current hovering target by checking\n              // If element has the same class of initial touch start element (which has touch event listener registered)\n              const currentTarget = currentTargets.find(t => t.className.split(classSeparator).some(c => eventTargetClasses.includes(c)))\n\n              if (currentTarget &&\n                !(e.target as HTMLElement)?.isSameNode(currentTarget)\n              ) {\n                currentTarget.dispatchEvent(new TouchEvent(e.type, {\n                  changedTouches: e.changedTouches as unknown as Touch[],\n                  targetTouches: e.targetTouches as unknown as Touch[],\n                  touches: e.touches as unknown as Touch[],\n                }))\n                return\n              }\n            }\n\n            this.$emit(event, getEvent(e), e)\n          }\n\n          return eventOptions.result\n        }\n\n        if (key in on) {\n          /* istanbul ignore next */\n          if (Array.isArray(on[key])) {\n            (on[key] as MouseHandler[]).push(handler)\n          } else {\n            on[key] = [on[key], handler] as MouseHandler[]\n          }\n        } else {\n          on[key] = handler\n        }\n      }\n\n      return on\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}