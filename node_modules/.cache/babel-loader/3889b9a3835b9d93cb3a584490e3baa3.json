{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapState, mapActions } from 'vuex';\nexport default {\n  data() {\n    return {\n      // UWAGA: aby zaczytało do tabeli dane należy ustawić w headers wartość value= nazwie pola z API\n      headers: [{\n        text: 'Customer name',\n        value: 'customer.contractorName',\n        align: 'start'\n      }, {\n        text: 'Customer Fibu',\n        value: 'customerFibu'\n      }, {\n        text: 'Street',\n        value: 'customer.street'\n      }, {\n        text: 'City',\n        value: 'customer.city'\n      }, {\n        text: 'Zip code',\n        value: 'customer.zipCode'\n      }, {\n        text: 'Sales representative',\n        value: 'user.userName'\n      }, {\n        text: 'Division',\n        value: 'user.division'\n      }, {\n        text: 'Actions',\n        value: 'actions',\n        sortable: false\n      }],\n      editedItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      },\n      defaultItem: {\n        name: '',\n        calories: 0,\n        fat: 0,\n        carbs: 0,\n        protein: 0\n      },\n      loading: true,\n      search: '',\n      dialog: false,\n      dialogDelete: false,\n      editedIndex: -1,\n      desserts: []\n      //xx: true,\n      // snackbar: {\n      //   message: '',\n      //   type: error,\n      //   visible: false\n      // }\n    };\n  },\n\n  computed: {\n    ...mapState('custom', ['allCustomerAssignments'])\n  },\n  watch: {\n    dialog(val) {\n      val || this.close();\n    },\n    dialogDelete(val) {\n      val || this.closeDelete();\n    }\n  },\n  methods: {\n    ...mapActions('custom', ['getAllCustomerAssignmentsAction']),\n    initialize() {\n      this.desserts = [{\n        name: 'Frozen Yogurt',\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0\n      }, {\n        name: 'Ice cream sandwich',\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3\n      }, {\n        name: 'Eclair',\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0\n      }, {\n        name: 'Cupcake',\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3\n      }, {\n        name: 'Gingerbread',\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9\n      }, {\n        name: 'Jelly bean',\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0\n      }, {\n        name: 'Lollipop',\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0\n      }, {\n        name: 'Honeycomb',\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5\n      }, {\n        name: 'Donut',\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9\n      }, {\n        name: 'KitKat',\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7\n      }];\n    },\n    editItem(item) {\n      this.editedIndex = this.allCustomerAssignments.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialog = true;\n    },\n    deleteItem(item) {\n      this.editedIndex = this.allCustomerAssignments.indexOf(item);\n      this.editedItem = Object.assign({}, item);\n      this.dialogDelete = true;\n    },\n    deleteItemConfirm() {\n      this.allCustomerAssignments.splice(this.editedIndex, 1);\n      this.closeDelete();\n    },\n    close() {\n      this.dialog = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n    closeDelete() {\n      this.dialogDelete = false;\n      this.$nextTick(() => {\n        this.editedItem = Object.assign({}, this.defaultItem);\n        this.editedIndex = -1;\n      });\n    },\n    save() {\n      if (this.editedIndex > -1) {\n        Object.assign(this.allCustomerAssignments[this.editedIndex], this.editedItem);\n      } else {\n        this.allCustomerAssignments.push(this.editedItem);\n      }\n      this.close();\n    }\n  },\n  created() {\n    this.loading = true;\n    try {\n      this.getAllCustomerAssignmentsAction();\n      this.loading = false;\n    } catch (error) {\n      console.log(error);\n      this.loading = false;\n    }\n  }\n};","map":{"version":3,"mappings":";AAiFA;AAEA;EACAA;IACA;MACA;MACAC,UACA;QAAAC;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,GACA;QAAAD;QAAAC;QAAAE;MAAA,EACA;MAEAC;QACAC;QACAC;QACAC;QACAC;QACAC;MACA;MACAC;QACAL;QACAC;QACAC;QACAC;QACAC;MACA;MAEAE;MACAC;MACAC;MACAC;MACAC;MACAC;MACA;MACA;MACA;MACA;MACA;MACA;IAEA;EAEA;;EAEAC;IACA;EACA;EAEAC;IACAL;MACAM;IACA;IACAL;MACAK;IACA;EACA;EAEAC;IACA;IAEAC;MACA,iBACA;QACAhB;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,GACA;QACAJ;QACAC;QACAC;QACAC;QACAC;MACA,EACA;IACA;IACAa;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACA;QACAC;MACA;QACA;MACA;MACA;IACA;EAEA;EAEAC;IACA;IAEA;MACA;MACA;IACA;MACAC;MACA;IACA;EAEA;AACA","names":["data","headers","text","value","align","sortable","editedItem","name","calories","fat","carbs","protein","defaultItem","loading","search","dialog","dialogDelete","editedIndex","desserts","computed","watch","val","methods","initialize","editItem","deleteItem","deleteItemConfirm","close","closeDelete","save","Object","created","console"],"sourceRoot":"src/components/Tables","sources":["TableCustomerAssignments.vue"],"sourcesContent":["<template>\r\n    <v-card>\r\n    <v-card-title>\r\n      <span class=\"space\">\r\n        Customer Assignments\r\n      </span>\r\n      <v-spacer></v-spacer>\r\n      <v-text-field\r\n        v-model=\"search\"\r\n        append-icon=\"mdi-magnify\"\r\n        label=\"Search\"\r\n        single-line\r\n        hide-details\r\n      ></v-text-field>\r\n    </v-card-title>\r\n  \r\n  <v-data-table\r\n    :headers=\"headers\"\r\n    :items=\"se\"\r\n    :loading=\"loading\"\r\n    :search=\"search\"\r\n    sort-by=\"customerName\"\r\n    class=\"elevation-1\"\r\n    multi-sort\r\n    :items-per-page=\"10\"\r\n    height=\"550\">\r\n\r\n    <v-template>\r\n      <v-dialog v-model=\"dialogDelete\" max-width=\"500px\">\r\n        <v-card>\r\n          <v-card-title class=\"text-h5\">Are you sure you want to delete this item?</v-card-title>\r\n          <v-card-actions>\r\n            <v-spacer></v-spacer>\r\n            <v-btn color=\"blue darken-1\" text @click=\"closeDelete\">Cancel</v-btn>\r\n            <v-btn color=\"blue darken-1\" text @click=\"deleteItemConfirm\">OK</v-btn>\r\n            <v-spacer></v-spacer>\r\n          </v-card-actions>\r\n        </v-card>\r\n      </v-dialog>\r\n    </v-template>\r\n\r\n    <template v-slot:item.actions=\"{ item }\">\r\n      <v-icon\r\n        dense\r\n        color=\"primary\"\r\n        @click=\"editItem(item)\"\r\n      >\r\n        mdi-pencil-outline\r\n      </v-icon>\r\n      <v-icon\r\n        dense\r\n        color=\"warning\"\r\n        @click=\"deleteItem(item)\"\r\n      >\r\n        mdi-delete-outline\r\n      </v-icon>\r\n    </template>\r\n\r\n\r\n  </v-data-table>\r\n  </v-card>\r\n\r\n\r\n  <!-- <div\r\n        v-for=\"item in allCommissions\"\r\n        :key=\"item.customerFibu\"\r\n        > \r\n        {{ item.customerFibu }}\r\n        {{ item.commissionProcent }}\r\n        {{ item.commissionValue }}\r\n\r\n      </div> -->\r\n\r\n</template>\r\n\r\n\r\n\r\n\r\n\r\n\r\n<script>\r\nimport { mapState, mapActions } from 'vuex';\r\n\r\n  export default {\r\n    data() {\r\n      return {\r\n        // UWAGA: aby zaczytało do tabeli dane należy ustawić w headers wartość value= nazwie pola z API\r\n        headers: [\r\n          { text: 'Customer name', value: 'customer.contractorName', align: 'start'},\r\n          { text: 'Customer Fibu', value: 'customerFibu'},\r\n          { text: 'Street', value: 'customer.street'},\r\n          { text: 'City', value: 'customer.city'},\r\n          { text: 'Zip code', value: 'customer.zipCode'},\r\n          { text: 'Sales representative', value: 'user.userName'},\r\n          { text: 'Division', value: 'user.division'},\r\n          { text: 'Actions', value: 'actions', sortable: false },\r\n        ],\r\n\r\n        editedItem: {\r\n        name: '',\r\n        calories: 0,\r\n        fat: 0,\r\n        carbs: 0,\r\n        protein: 0,\r\n      },\r\n      defaultItem: {\r\n        name: '',\r\n        calories: 0,\r\n        fat: 0,\r\n        carbs: 0,\r\n        protein: 0,\r\n      },\r\n\r\n        loading: true,\r\n        search: '',\r\n        dialog: false,\r\n        dialogDelete: false,\r\n        editedIndex: -1,\r\n        desserts:[]\r\n        //xx: true,\r\n        // snackbar: {\r\n        //   message: '',\r\n        //   type: error,\r\n        //   visible: false\r\n        // }\r\n\r\n      }\r\n\r\n    },\r\n\r\n    computed: {\r\n    ...mapState('custom', ['allCustomerAssignments'])\r\n    },\r\n\r\n    watch: {\r\n      dialog (val) {\r\n        val || this.close()\r\n      },\r\n      dialogDelete (val) {\r\n        val || this.closeDelete()\r\n      },\r\n    },\r\n  \r\n    methods: {\r\n      ...mapActions('custom', ['getAllCustomerAssignmentsAction']),\r\n\r\n      initialize () {\r\n        this.desserts = [\r\n          {\r\n            name: 'Frozen Yogurt',\r\n            calories: 159,\r\n            fat: 6.0,\r\n            carbs: 24,\r\n            protein: 4.0,\r\n          },\r\n          {\r\n            name: 'Ice cream sandwich',\r\n            calories: 237,\r\n            fat: 9.0,\r\n            carbs: 37,\r\n            protein: 4.3,\r\n          },\r\n          {\r\n            name: 'Eclair',\r\n            calories: 262,\r\n            fat: 16.0,\r\n            carbs: 23,\r\n            protein: 6.0,\r\n          },\r\n          {\r\n            name: 'Cupcake',\r\n            calories: 305,\r\n            fat: 3.7,\r\n            carbs: 67,\r\n            protein: 4.3,\r\n          },\r\n          {\r\n            name: 'Gingerbread',\r\n            calories: 356,\r\n            fat: 16.0,\r\n            carbs: 49,\r\n            protein: 3.9,\r\n          },\r\n          {\r\n            name: 'Jelly bean',\r\n            calories: 375,\r\n            fat: 0.0,\r\n            carbs: 94,\r\n            protein: 0.0,\r\n          },\r\n          {\r\n            name: 'Lollipop',\r\n            calories: 392,\r\n            fat: 0.2,\r\n            carbs: 98,\r\n            protein: 0,\r\n          },\r\n          {\r\n            name: 'Honeycomb',\r\n            calories: 408,\r\n            fat: 3.2,\r\n            carbs: 87,\r\n            protein: 6.5,\r\n          },\r\n          {\r\n            name: 'Donut',\r\n            calories: 452,\r\n            fat: 25.0,\r\n            carbs: 51,\r\n            protein: 4.9,\r\n          },\r\n          {\r\n            name: 'KitKat',\r\n            calories: 518,\r\n            fat: 26.0,\r\n            carbs: 65,\r\n            protein: 7,\r\n          },\r\n        ]\r\n      },\r\n      editItem (item) {\r\n        this.editedIndex = this.allCustomerAssignments.indexOf(item)\r\n        this.editedItem = Object.assign({}, item)\r\n        this.dialog = true\r\n      },\r\n\r\n      deleteItem (item) {\r\n        this.editedIndex = this.allCustomerAssignments.indexOf(item)\r\n        this.editedItem = Object.assign({}, item)\r\n        this.dialogDelete = true\r\n      },\r\n\r\n      deleteItemConfirm () {\r\n        this.allCustomerAssignments.splice(this.editedIndex, 1)\r\n        this.closeDelete()\r\n      },\r\n\r\n      close () {\r\n        this.dialog = false\r\n        this.$nextTick(() => {\r\n          this.editedItem = Object.assign({}, this.defaultItem)\r\n          this.editedIndex = -1\r\n        })\r\n      },\r\n\r\n      closeDelete () {\r\n        this.dialogDelete = false\r\n        this.$nextTick(() => {\r\n          this.editedItem = Object.assign({}, this.defaultItem)\r\n          this.editedIndex = -1\r\n        })\r\n      },\r\n\r\n      save () {\r\n        if (this.editedIndex > -1) {\r\n          Object.assign(this.allCustomerAssignments[this.editedIndex], this.editedItem)\r\n        } else {\r\n          this.allCustomerAssignments.push(this.editedItem)\r\n        }\r\n        this.close()\r\n      },\r\n\r\n    },\r\n\r\n    created() {\r\n      this.loading = true\r\n\r\n      try {\r\n        this.getAllCustomerAssignmentsAction()  \r\n        this.loading = false     \r\n      } catch (error) {\r\n        console.log(error)\r\n        this.loading = false       \r\n      }\r\n\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n<style scoped>\r\n\r\n  .space {\r\n    letter-spacing: 3px;\r\n    color: gray;\r\n  }\r\n\r\n  .backCol {\r\n    background-color:#222736\r\n  }\r\n</style>"]},"metadata":{},"sourceType":"module"}