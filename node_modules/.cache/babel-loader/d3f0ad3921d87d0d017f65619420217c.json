{"ast":null,"code":"// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utilities\n\nimport { getSlot } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nexport default mixins(GroupableFactory('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'), RegistrableProvide('expansionPanel', true)\n/* @vue/component */).extend({\n  name: 'v-expansion-panel',\n  props: {\n    disabled: Boolean,\n    readonly: Boolean\n  },\n  data() {\n    return {\n      content: null,\n      header: null,\n      nextIsActive: false\n    };\n  },\n  computed: {\n    classes() {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses\n      };\n    },\n    isDisabled() {\n      return this.expansionPanels.disabled || this.disabled;\n    },\n    isReadonly() {\n      return this.expansionPanels.readonly || this.readonly;\n    }\n  },\n  methods: {\n    registerContent(vm) {\n      this.content = vm;\n    },\n    unregisterContent() {\n      this.content = null;\n    },\n    registerHeader(vm) {\n      this.header = vm;\n      vm.$on('click', this.onClick);\n    },\n    unregisterHeader() {\n      this.header = null;\n    },\n    onClick(e) {\n      if (e.detail) this.header.$el.blur();\n      this.$emit('click', e);\n      this.isReadonly || this.isDisabled || this.toggle();\n    },\n    toggle() {\n      this.$nextTick(() => this.$emit('change'));\n    }\n  },\n  render(h) {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive)\n      }\n    }, getSlot(this));\n  }\n});","map":{"version":3,"mappings":"AAKA;AACA,SAASA,OAAO,IAAIC,gBAApB,QAA4C,wBAA5C;AACA,SAASC,OAAO,IAAIC,kBAApB,QAA8C,0BAA9C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAQA,eAAeA,MAAM,CACnBJ,gBAAgB,CAA6C,iBAA7C,EAAgE,mBAAhE,EAAqF,oBAArF,CADG,EAEnBE,kBAAkB,CAAC,gBAAD,EAAmB,IAAnB;AAClB,qBAHa,CAIbG,MAJa,CAIN;EACPC,IAAI,EAAE,mBADC;EAGPC,KAAK,EAAE;IACLC,QAAQ,EAAEC,OADL;IAELC,QAAQ,EAAED;EAFL,CAHA;EAQPE,IAAI;IACF,OAAO;MACLC,OAAO,EAAE,IADJ;MAELC,MAAM,EAAE,IAFH;MAGLC,YAAY,EAAE;IAHT,CAAP;EAKD,CAdM;EAgBPC,QAAQ,EAAE;IACRC,OAAO;MACL,OAAO;QACL,6BAA6B,KAAKC,QAD7B;QAEL,kCAAkC,KAAKH,YAFlC;QAGL,+BAA+B,KAAKI,UAH/B;QAIL,GAAG,KAAKC;MAJH,CAAP;IAMD,CARO;IASRD,UAAU;MACR,OAAO,KAAKE,eAAL,CAAqBZ,QAArB,IAAiC,KAAKA,QAA7C;IACD,CAXO;IAYRa,UAAU;MACR,OAAO,KAAKD,eAAL,CAAqBV,QAArB,IAAiC,KAAKA,QAA7C;IACD;EAdO,CAhBH;EAiCPY,OAAO,EAAE;IACPC,eAAe,CAAEC,EAAF,EAAoC;MACjD,KAAKZ,OAAL,GAAeY,EAAf;IACD,CAHM;IAIPC,iBAAiB;MACf,KAAKb,OAAL,GAAe,IAAf;IACD,CANM;IAOPc,cAAc,CAAEF,EAAF,EAAmC;MAC/C,KAAKX,MAAL,GAAcW,EAAd;MACAA,EAAE,CAACG,GAAH,CAAO,OAAP,EAAgB,KAAKC,OAArB;IACD,CAVM;IAWPC,gBAAgB;MACd,KAAKhB,MAAL,GAAc,IAAd;IACD,CAbM;IAcPe,OAAO,CAAEE,CAAF,EAAe;MACpB,IAAIA,CAAC,CAACC,MAAN,EAAc,KAAKlB,MAAL,CAAamB,GAAb,CAAiBC,IAAjB;MAEd,KAAKC,KAAL,CAAW,OAAX,EAAoBJ,CAApB;MAEA,KAAKT,UAAL,IAAmB,KAAKH,UAAxB,IAAsC,KAAKiB,MAAL,EAAtC;IACD,CApBM;IAqBPA,MAAM;MACJ,KAAKC,SAAL,CAAe,MAAM,KAAKF,KAAL,CAAW,QAAX,CAArB;IACD;EAvBM,CAjCF;EA2DPG,MAAM,CAAEC,CAAF,EAAG;IACP,OAAOA,CAAC,CAAC,KAAD,EAAQ;MACdC,WAAW,EAAE,mBADC;MAEdC,KAAK,EAAE,KAAKxB,OAFE;MAGdyB,KAAK,EAAE;QACL,iBAAiBC,MAAM,CAAC,KAAKzB,QAAN;MADlB;IAHO,CAAR,EAMLd,OAAO,CAAC,IAAD,CANF,CAAR;EAOD;AAnEM,CAJM,CAAf","names":["factory","GroupableFactory","provide","RegistrableProvide","getSlot","mixins","extend","name","props","disabled","Boolean","readonly","data","content","header","nextIsActive","computed","classes","isActive","isDisabled","groupClasses","expansionPanels","isReadonly","methods","registerContent","vm","unregisterContent","registerHeader","$on","onClick","unregisterHeader","e","detail","$el","blur","$emit","toggle","$nextTick","render","h","staticClass","class","attrs","String"],"sourceRoot":"","sources":["../../../src/components/VExpansionPanel/VExpansionPanel.ts"],"sourcesContent":["// Components\nimport VExpansionPanels from './VExpansionPanels'\nimport VExpansionPanelHeader from './VExpansionPanelHeader'\nimport VExpansionPanelContent from './VExpansionPanelContent'\n\n// Mixins\nimport { factory as GroupableFactory } from '../../mixins/groupable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utilities\nimport { getSlot } from '../../util/helpers'\nimport mixins from '../../util/mixins'\n\n// Types\nimport { VNode } from 'vue'\n\ntype VExpansionPanelHeaderInstance = InstanceType<typeof VExpansionPanelHeader>\ntype VExpansionPanelContentInstance = InstanceType<typeof VExpansionPanelContent>\n\nexport default mixins(\n  GroupableFactory<'expansionPanels', typeof VExpansionPanels>('expansionPanels', 'v-expansion-panel', 'v-expansion-panels'),\n  RegistrableProvide('expansionPanel', true)\n  /* @vue/component */\n).extend({\n  name: 'v-expansion-panel',\n\n  props: {\n    disabled: Boolean,\n    readonly: Boolean,\n  },\n\n  data () {\n    return {\n      content: null as VExpansionPanelContentInstance | null,\n      header: null as VExpansionPanelHeaderInstance | null,\n      nextIsActive: false,\n    }\n  },\n\n  computed: {\n    classes (): object {\n      return {\n        'v-expansion-panel--active': this.isActive,\n        'v-expansion-panel--next-active': this.nextIsActive,\n        'v-expansion-panel--disabled': this.isDisabled,\n        ...this.groupClasses,\n      }\n    },\n    isDisabled (): boolean {\n      return this.expansionPanels.disabled || this.disabled\n    },\n    isReadonly (): boolean {\n      return this.expansionPanels.readonly || this.readonly\n    },\n  },\n\n  methods: {\n    registerContent (vm: VExpansionPanelContentInstance) {\n      this.content = vm\n    },\n    unregisterContent () {\n      this.content = null\n    },\n    registerHeader (vm: VExpansionPanelHeaderInstance) {\n      this.header = vm\n      vm.$on('click', this.onClick)\n    },\n    unregisterHeader () {\n      this.header = null\n    },\n    onClick (e: MouseEvent) {\n      if (e.detail) this.header!.$el.blur()\n\n      this.$emit('click', e)\n\n      this.isReadonly || this.isDisabled || this.toggle()\n    },\n    toggle () {\n      this.$nextTick(() => this.$emit('change'))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-expansion-panel',\n      class: this.classes,\n      attrs: {\n        'aria-expanded': String(this.isActive),\n      },\n    }, getSlot(this))\n  },\n})\n"]},"metadata":{},"sourceType":"module"}